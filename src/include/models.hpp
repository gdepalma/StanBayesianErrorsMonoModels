
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_logistic_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_logistic");
    reader.add_event(141, 141, "end", "model_logistic");
    return reader;
}

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
getytrue(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& coef,
             const T1__& xtrue,
             const T2__& yobs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
            fun_scalar_t__ mb;
            (void) mb;  // dummy to suppress unused var warning

            stan::math::initialize(mb, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(mb,DUMMY_VAR__);
            fun_scalar_t__ fx;
            (void) fx;  // dummy to suppress unused var warning

            stan::math::initialize(fx, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(fx,DUMMY_VAR__);
            fun_scalar_t__ ytrue;
            (void) ytrue;  // dummy to suppress unused var warning

            stan::math::initialize(ytrue, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(ytrue,DUMMY_VAR__);


            stan::math::assign(mb, (((2 * get_base1(coef,3,"coef",1)) * get_base1(coef,4,"coef",1)) / (get_base1(coef,3,"coef",1) + get_base1(coef,4,"coef",1))));
            stan::math::assign(fx, (1 / (1 + exp((-(mb) * (get_base1(coef,2,"coef",1) - xtrue))))));
            stan::math::assign(ytrue, ((get_base1(coef,1,"coef",1) * ((fx * exp((get_base1(coef,3,"coef",1) * (get_base1(coef,2,"coef",1) - xtrue)))) + ((1 - fx) * exp((get_base1(coef,4,"coef",1) * (get_base1(coef,2,"coef",1) - xtrue)))))) / ((1 + (fx * exp((get_base1(coef,3,"coef",1) * (get_base1(coef,2,"coef",1) - xtrue))))) + ((1 - fx) * exp((get_base1(coef,4,"coef",1) * (get_base1(coef,2,"coef",1) - xtrue)))))));
            return stan::math::promote_scalar<fun_return_scalar_t__>(ytrue);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct getytrue_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& coef,
             const T1__& xtrue,
             const T2__& yobs, std::ostream* pstream__) const {
        return getytrue(coef, xtrue, yobs, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
xlikecens(const T0__& xobs,
              const T1__& xtrue,
              const T2__& xsig,
              const T3__& xcensu,
              const T4__& xcensl, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        if (as_bool((primitive_value(logical_eq(xcensu,0)) && primitive_value(logical_eq(xcensl,0))))) {
            return stan::math::promote_scalar<fun_return_scalar_t__>(log_diff_exp(normal_cdf_log(xobs,xtrue,xsig),normal_cdf_log((xobs - 1),xtrue,xsig)));
        } else if (as_bool((primitive_value(logical_eq(xcensl,0)) && primitive_value(logical_eq(xcensu,1))))) {

            return stan::math::promote_scalar<fun_return_scalar_t__>(log_diff_exp(0,normal_cdf_log((xobs - 1),xtrue,xsig)));
        } else if (as_bool((primitive_value(logical_eq(xcensl,1)) && primitive_value(logical_eq(xcensu,0))))) {
            return stan::math::promote_scalar<fun_return_scalar_t__>(normal_cdf_log(xobs,xtrue,xsig));
        } else {
            return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct xlikecens_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& xobs,
              const T1__& xtrue,
              const T2__& xsig,
              const T3__& xcensu,
              const T4__& xcensl, std::ostream* pstream__) const {
        return xlikecens(xobs, xtrue, xsig, xcensu, xcensl, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
ylikecens(const T0__& yobs,
              const T1__& ytrue,
              const T2__& ysig,
              const T3__& ycensu,
              const T4__& ycensl, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        if (as_bool((primitive_value(logical_eq(ycensu,0)) && primitive_value(logical_eq(ycensl,0))))) {
            return stan::math::promote_scalar<fun_return_scalar_t__>(log_diff_exp(normal_cdf_log((yobs + 0.5),ytrue,ysig),normal_cdf_log((yobs - 0.5),ytrue,ysig)));
        } else if (as_bool((primitive_value(logical_eq(ycensl,0)) && primitive_value(logical_eq(ycensu,1))))) {
            return stan::math::promote_scalar<fun_return_scalar_t__>(log_diff_exp(0,normal_cdf_log((yobs - 0.5),ytrue,ysig)));
        } else if (as_bool((primitive_value(logical_eq(ycensl,1)) && primitive_value(logical_eq(ycensu,0))))) {
            return stan::math::promote_scalar<fun_return_scalar_t__>(normal_cdf_log((yobs + 0.5),ytrue,ysig));
        } else {
            return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ylikecens_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& yobs,
              const T1__& ytrue,
              const T2__& ysig,
              const T3__& ycensu,
              const T4__& ycensl, std::ostream* pstream__) const {
        return ylikecens(yobs, ytrue, ysig, ycensu, ycensl, pstream__);
    }
};

class model_logistic : public prob_grad {
private:
    int N;
    vector_d yobs;
    vector_d xobs;
    vector_d xcensl;
    vector_d xcensu;
    vector_d ycensl;
    vector_d ycensu;
    int n_groups;
    int Ngrid;
    vector<double> xgrid;
    double xsig;
    double ysig;
public:
    model_logistic(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_logistic(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_logistic_namespace::model_logistic";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        validate_non_negative_index("yobs", "N", N);
        context__.validate_dims("data initialization", "yobs", "vector_d", context__.to_vec(N));
        validate_non_negative_index("yobs", "N", N);
        yobs = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        vals_r__ = context__.vals_r("yobs");
        pos__ = 0;
        size_t yobs_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < yobs_i_vec_lim__; ++i_vec__) {
            yobs[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("xobs", "N", N);
        context__.validate_dims("data initialization", "xobs", "vector_d", context__.to_vec(N));
        validate_non_negative_index("xobs", "N", N);
        xobs = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        vals_r__ = context__.vals_r("xobs");
        pos__ = 0;
        size_t xobs_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < xobs_i_vec_lim__; ++i_vec__) {
            xobs[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("xcensl", "N", N);
        context__.validate_dims("data initialization", "xcensl", "vector_d", context__.to_vec(N));
        validate_non_negative_index("xcensl", "N", N);
        xcensl = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        vals_r__ = context__.vals_r("xcensl");
        pos__ = 0;
        size_t xcensl_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < xcensl_i_vec_lim__; ++i_vec__) {
            xcensl[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("xcensu", "N", N);
        context__.validate_dims("data initialization", "xcensu", "vector_d", context__.to_vec(N));
        validate_non_negative_index("xcensu", "N", N);
        xcensu = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        vals_r__ = context__.vals_r("xcensu");
        pos__ = 0;
        size_t xcensu_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < xcensu_i_vec_lim__; ++i_vec__) {
            xcensu[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("ycensl", "N", N);
        context__.validate_dims("data initialization", "ycensl", "vector_d", context__.to_vec(N));
        validate_non_negative_index("ycensl", "N", N);
        ycensl = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        vals_r__ = context__.vals_r("ycensl");
        pos__ = 0;
        size_t ycensl_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < ycensl_i_vec_lim__; ++i_vec__) {
            ycensl[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("ycensu", "N", N);
        context__.validate_dims("data initialization", "ycensu", "vector_d", context__.to_vec(N));
        validate_non_negative_index("ycensu", "N", N);
        ycensu = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        vals_r__ = context__.vals_r("ycensu");
        pos__ = 0;
        size_t ycensu_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < ycensu_i_vec_lim__; ++i_vec__) {
            ycensu[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "n_groups", "int", context__.to_vec());
        n_groups = int(0);
        vals_i__ = context__.vals_i("n_groups");
        pos__ = 0;
        n_groups = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Ngrid", "int", context__.to_vec());
        Ngrid = int(0);
        vals_i__ = context__.vals_i("Ngrid");
        pos__ = 0;
        Ngrid = vals_i__[pos__++];
        validate_non_negative_index("xgrid", "Ngrid", Ngrid);
        context__.validate_dims("data initialization", "xgrid", "double", context__.to_vec(Ngrid));
        validate_non_negative_index("xgrid", "Ngrid", Ngrid);
        xgrid = std::vector<double>(Ngrid,double(0));
        vals_r__ = context__.vals_r("xgrid");
        pos__ = 0;
        size_t xgrid_limit_0__ = Ngrid;
        for (size_t i_0__ = 0; i_0__ < xgrid_limit_0__; ++i_0__) {
            xgrid[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "xsig", "double", context__.to_vec());
        xsig = double(0);
        vals_r__ = context__.vals_r("xsig");
        pos__ = 0;
        xsig = vals_r__[pos__++];
        context__.validate_dims("data initialization", "ysig", "double", context__.to_vec());
        ysig = double(0);
        vals_r__ = context__.vals_r("ysig");
        pos__ = 0;
        ysig = vals_r__[pos__++];

        // validate, data variables
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        validate_non_negative_index("mu", "n_groups", n_groups);
        num_params_r__ += n_groups;
        validate_non_negative_index("v", "n_groups", n_groups);
        num_params_r__ += (n_groups - 1);
        validate_non_negative_index("sigma", "n_groups", n_groups);
        num_params_r__ += n_groups;
        validate_non_negative_index("coef", "4", 4);
        num_params_r__ += 4;
        validate_non_negative_index("xtrue", "N", N);
        num_params_r__ += N;
    }

    ~model_logistic() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("mu")))
            throw std::runtime_error("variable mu missing");
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        validate_non_negative_index("mu", "n_groups", n_groups);
        context__.validate_dims("initialization", "mu", "double", context__.to_vec(n_groups));
        // generate_declaration mu
        std::vector<double> mu(n_groups,double(0));
        for (int i0__ = 0U; i0__ < n_groups; ++i0__)
            mu[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_groups; ++i0__)
            try {
            writer__.scalar_unconstrain(mu[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu: ") + e.what());
        }

        if (!(context__.contains_r("v")))
            throw std::runtime_error("variable v missing");
        vals_r__ = context__.vals_r("v");
        pos__ = 0U;
        validate_non_negative_index("v", "n_groups", n_groups);
        context__.validate_dims("initialization", "v", "vector_d", context__.to_vec(n_groups));
        // generate_declaration v
        vector_d v(static_cast<Eigen::VectorXd::Index>(n_groups));
        for (int j1__ = 0U; j1__ < n_groups; ++j1__)
            v(j1__) = vals_r__[pos__++];
        try {
            writer__.simplex_unconstrain(v);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable v: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "n_groups", n_groups);
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec(n_groups));
        // generate_declaration sigma
        std::vector<double> sigma(n_groups,double(0));
        for (int i0__ = 0U; i0__ < n_groups; ++i0__)
            sigma[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_groups; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,sigma[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("coef")))
            throw std::runtime_error("variable coef missing");
        vals_r__ = context__.vals_r("coef");
        pos__ = 0U;
        validate_non_negative_index("coef", "4", 4);
        context__.validate_dims("initialization", "coef", "vector_d", context__.to_vec(4));
        // generate_declaration coef
        vector_d coef(static_cast<Eigen::VectorXd::Index>(4));
        for (int j1__ = 0U; j1__ < 4; ++j1__)
            coef(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,coef);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable coef: ") + e.what());
        }

        if (!(context__.contains_r("xtrue")))
            throw std::runtime_error("variable xtrue missing");
        vals_r__ = context__.vals_r("xtrue");
        pos__ = 0U;
        validate_non_negative_index("xtrue", "N", N);
        context__.validate_dims("initialization", "xtrue", "double", context__.to_vec(N));
        // generate_declaration xtrue
        std::vector<double> xtrue(N,double(0));
        for (int i0__ = 0U; i0__ < N; ++i0__)
            xtrue[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N; ++i0__)
            try {
            writer__.scalar_unconstrain(xtrue[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable xtrue: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<T__> mu;
        size_t dim_mu_0__ = n_groups;
        mu.reserve(dim_mu_0__);
        for (size_t k_0__ = 0; k_0__ < dim_mu_0__; ++k_0__) {
            if (jacobian__)
                mu.push_back(in__.scalar_constrain(lp__));
            else
                mu.push_back(in__.scalar_constrain());
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  v;
        (void) v;  // dummy to suppress unused var warning
        if (jacobian__)
            v = in__.simplex_constrain(n_groups,lp__);
        else
            v = in__.simplex_constrain(n_groups);

        vector<T__> sigma;
        size_t dim_sigma_0__ = n_groups;
        sigma.reserve(dim_sigma_0__);
        for (size_t k_0__ = 0; k_0__ < dim_sigma_0__; ++k_0__) {
            if (jacobian__)
                sigma.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                sigma.push_back(in__.scalar_lb_constrain(0));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  coef;
        (void) coef;  // dummy to suppress unused var warning
        if (jacobian__)
            coef = in__.vector_lb_constrain(0,4,lp__);
        else
            coef = in__.vector_lb_constrain(0,4);

        vector<T__> xtrue;
        size_t dim_xtrue_0__ = N;
        xtrue.reserve(dim_xtrue_0__);
        for (size_t k_0__ = 0; k_0__ < dim_xtrue_0__; ++k_0__) {
            if (jacobian__)
                xtrue.push_back(in__.scalar_constrain(lp__));
            else
                xtrue.push_back(in__.scalar_constrain());
        }


        // transformed parameters
        validate_non_negative_index("Theta", "n_groups", n_groups);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  Theta(static_cast<Eigen::VectorXd::Index>(n_groups));
        (void) Theta;  // dummy to suppress unused var warning

        stan::math::initialize(Theta, DUMMY_VAR__);
        stan::math::fill(Theta,DUMMY_VAR__);


        try {
            stan::math::assign(get_base1_lhs(Theta,1,"Theta",1), get_base1(v,1,"v",1));
            for (int j = 2; j <= (n_groups - 1); ++j) {

                stan::math::assign(get_base1_lhs(Theta,j,"Theta",1), (((get_base1(v,j,"v",1) * (1 - get_base1(v,(j - 1),"v",1))) * get_base1(Theta,(j - 1),"Theta",1)) / get_base1(v,(j - 1),"v",1)));
            }
            stan::math::assign(get_base1_lhs(Theta,n_groups,"Theta",1), (1 - sum(stan::model::rvalue(Theta, stan::model::cons_list(stan::model::index_min_max(1, (n_groups - 1)), stan::model::nil_index_list()), "Theta"))));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < n_groups; ++i0__) {
            if (stan::math::is_uninitialized(Theta(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Theta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        stan::math::check_simplex(function__,"Theta",Theta);

        // model body
        try {
            {
                validate_non_negative_index("contributions", "n_groups", n_groups);
                vector<T__> contributions(n_groups);
                stan::math::initialize(contributions, DUMMY_VAR__);
                stan::math::fill(contributions,DUMMY_VAR__);
                T__ y_mu;
                (void) y_mu;  // dummy to suppress unused var warning

                stan::math::initialize(y_mu, DUMMY_VAR__);
                stan::math::fill(y_mu,DUMMY_VAR__);
                T__ alpha;
                (void) alpha;  // dummy to suppress unused var warning

                stan::math::initialize(alpha, DUMMY_VAR__);
                stan::math::fill(alpha,DUMMY_VAR__);
                stan::math::assign(alpha,1);


                lp_accum__.add(normal_log<propto__>(sigma, 0.5, 4));
                lp_accum__.add(normal_log<propto__>(mu, 0, 20));
                lp_accum__.add(beta_log<propto__>(v, 1, alpha));
                for (int i = 1; i <= N; ++i) {

                    if (as_bool((primitive_value(logical_eq(get_base1(xcensl,i,"xcensl",1),0)) && primitive_value(logical_eq(get_base1(xcensu,i,"xcensu",1),0))))) {

                        lp_accum__.add(normal_log<propto__>(get_base1(xtrue,i,"xtrue",1), (get_base1(xobs,i,"xobs",1) - 0.5), 2));
                    } else if (as_bool((primitive_value(logical_eq(get_base1(xcensl,i,"xcensl",1),1)) && primitive_value(logical_eq(get_base1(xcensu,i,"xcensu",1),0))))) {

                        lp_accum__.add(normal_log<propto__>(get_base1(xtrue,i,"xtrue",1), (get_base1(xobs,i,"xobs",1) - 1.5), 3));
                    } else if (as_bool((primitive_value(logical_eq(get_base1(xcensl,i,"xcensl",1),0)) && primitive_value(logical_eq(get_base1(xcensu,i,"xcensu",1),1))))) {

                        lp_accum__.add(normal_log<propto__>(get_base1(xtrue,i,"xtrue",1), (get_base1(xobs,i,"xobs",1) + 0.5), 3));
                    }
                }
                for (int i = 1; i <= N; ++i) {

                    lp_accum__.add(xlikecens(get_base1(xobs,i,"xobs",1),get_base1(xtrue,i,"xtrue",1),xsig,get_base1(xcensu,i,"xcensu",1),get_base1(xcensl,i,"xcensl",1), pstream__));
                }
                for (int i = 1; i <= N; ++i) {

                    stan::math::assign(y_mu, getytrue(coef,get_base1(xtrue,i,"xtrue",1),get_base1(yobs,i,"yobs",1), pstream__));
                    lp_accum__.add(ylikecens(get_base1(yobs,i,"yobs",1),y_mu,ysig,get_base1(ycensu,i,"ycensu",1),get_base1(ycensl,i,"ycensl",1), pstream__));
                }
                for (int i = 1; i <= N; ++i) {

                    for (int k = 1; k <= n_groups; ++k) {

                        stan::math::assign(get_base1_lhs(contributions,k,"contributions",1), (log(get_base1(Theta,k,"Theta",1)) + normal_log(get_base1(xtrue,i,"xtrue",1),get_base1(mu,k,"mu",1),get_base1(sigma,k,"sigma",1))));
                    }
                    lp_accum__.add(log_sum_exp(contributions));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu");
        names__.push_back("v");
        names__.push_back("sigma");
        names__.push_back("coef");
        names__.push_back("xtrue");
        names__.push_back("Theta");
        names__.push_back("MIC_Dens");
        names__.push_back("gx");
        names__.push_back("mb");
        names__.push_back("fx");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(4);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ngrid);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ngrid);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ngrid);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_logistic_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<double> mu;
        size_t dim_mu_0__ = n_groups;
        for (size_t k_0__ = 0; k_0__ < dim_mu_0__; ++k_0__) {
            mu.push_back(in__.scalar_constrain());
        }
        vector_d v = in__.simplex_constrain(n_groups);
        vector<double> sigma;
        size_t dim_sigma_0__ = n_groups;
        for (size_t k_0__ = 0; k_0__ < dim_sigma_0__; ++k_0__) {
            sigma.push_back(in__.scalar_lb_constrain(0));
        }
        vector_d coef = in__.vector_lb_constrain(0,4);
        vector<double> xtrue;
        size_t dim_xtrue_0__ = N;
        for (size_t k_0__ = 0; k_0__ < dim_xtrue_0__; ++k_0__) {
            xtrue.push_back(in__.scalar_constrain());
        }
        for (int k_0__ = 0; k_0__ < n_groups; ++k_0__) {
            vars__.push_back(mu[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_groups; ++k_0__) {
            vars__.push_back(v[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_groups; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < 4; ++k_0__) {
            vars__.push_back(coef[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(xtrue[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("Theta", "n_groups", n_groups);
        vector_d Theta(static_cast<Eigen::VectorXd::Index>(n_groups));
        (void) Theta;  // dummy to suppress unused var warning

        stan::math::initialize(Theta, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(Theta,DUMMY_VAR__);


        try {
            stan::math::assign(get_base1_lhs(Theta,1,"Theta",1), get_base1(v,1,"v",1));
            for (int j = 2; j <= (n_groups - 1); ++j) {

                stan::math::assign(get_base1_lhs(Theta,j,"Theta",1), (((get_base1(v,j,"v",1) * (1 - get_base1(v,(j - 1),"v",1))) * get_base1(Theta,(j - 1),"Theta",1)) / get_base1(v,(j - 1),"v",1)));
            }
            stan::math::assign(get_base1_lhs(Theta,n_groups,"Theta",1), (1 - sum(stan::model::rvalue(Theta, stan::model::cons_list(stan::model::index_min_max(1, (n_groups - 1)), stan::model::nil_index_list()), "Theta"))));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        stan::math::check_simplex(function__,"Theta",Theta);

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < n_groups; ++k_0__) {
            vars__.push_back(Theta[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("MIC_Dens", "Ngrid", Ngrid);
        vector<double> MIC_Dens(Ngrid, 0.0);
        stan::math::initialize(MIC_Dens, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(MIC_Dens,DUMMY_VAR__);
        validate_non_negative_index("gx", "Ngrid", Ngrid);
        vector<double> gx(Ngrid, 0.0);
        stan::math::initialize(gx, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(gx,DUMMY_VAR__);
        double mb(0.0);
        (void) mb;  // dummy to suppress unused var warning

        stan::math::initialize(mb, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mb,DUMMY_VAR__);
        validate_non_negative_index("fx", "Ngrid", Ngrid);
        vector<double> fx(Ngrid, 0.0);
        stan::math::initialize(fx, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(fx,DUMMY_VAR__);


        try {
            for (int i = 1; i <= Ngrid; ++i) {

                stan::math::assign(get_base1_lhs(MIC_Dens,i,"MIC_Dens",1), 0);
                for (int j = 1; j <= n_groups; ++j) {

                    stan::math::assign(get_base1_lhs(MIC_Dens,i,"MIC_Dens",1), (get_base1(MIC_Dens,i,"MIC_Dens",1) + (((get_base1(Theta,j,"Theta",1) * 1) / sqrt(((2 * stan::math::pi()) * pow(get_base1(sigma,j,"sigma",1),2)))) * exp((-(pow((get_base1(xgrid,i,"xgrid",1) - get_base1(mu,j,"mu",1)),2)) / (2 * pow(get_base1(sigma,j,"sigma",1),2)))))));
                }
            }
            stan::math::assign(mb, (((2 * get_base1(coef,3,"coef",1)) * get_base1(coef,4,"coef",1)) / (get_base1(coef,3,"coef",1) + get_base1(coef,4,"coef",1))));
            for (int i = 1; i <= Ngrid; ++i) {

                stan::math::assign(get_base1_lhs(fx,i,"fx",1), (1 / (1 + exp((-(mb) * (get_base1(coef,2,"coef",1) - get_base1(xgrid,i,"xgrid",1)))))));
                stan::math::assign(get_base1_lhs(gx,i,"gx",1), ((get_base1(coef,1,"coef",1) * ((get_base1(fx,i,"fx",1) * exp((get_base1(coef,3,"coef",1) * (get_base1(coef,2,"coef",1) - get_base1(xgrid,i,"xgrid",1))))) + ((1 - get_base1(fx,i,"fx",1)) * exp((get_base1(coef,4,"coef",1) * (get_base1(coef,2,"coef",1) - get_base1(xgrid,i,"xgrid",1))))))) / ((1 + (get_base1(fx,i,"fx",1) * exp((get_base1(coef,3,"coef",1) * (get_base1(coef,2,"coef",1) - get_base1(xgrid,i,"xgrid",1)))))) + ((1 - get_base1(fx,i,"fx",1)) * exp((get_base1(coef,4,"coef",1) * (get_base1(coef,2,"coef",1) - get_base1(xgrid,i,"xgrid",1))))))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < Ngrid; ++k_0__) {
            vars__.push_back(MIC_Dens[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < Ngrid; ++k_0__) {
            vars__.push_back(gx[k_0__]);
        }
        vars__.push_back(mb);
        for (int k_0__ = 0; k_0__ < Ngrid; ++k_0__) {
            vars__.push_back(fx[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_logistic";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 4; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "coef" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xtrue" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= Ngrid; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "MIC_Dens" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Ngrid; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gx" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mb";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= Ngrid; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "fx" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (n_groups - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 4; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "coef" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xtrue" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= (n_groups - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= Ngrid; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "MIC_Dens" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Ngrid; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gx" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mb";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= Ngrid; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "fx" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_spline_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_spline");
    reader.add_event(136, 136, "end", "model_spline");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
xlikecens(const T0__& xobs,
              const T1__& xtrue,
              const T2__& xsig,
              const T3__& xcensu,
              const T4__& xcensl, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        if (as_bool((primitive_value(logical_eq(xcensu,0)) && primitive_value(logical_eq(xcensl,0))))) {
            return stan::math::promote_scalar<fun_return_scalar_t__>(log_diff_exp(normal_cdf_log(xobs,xtrue,xsig),normal_cdf_log((xobs - 1),xtrue,xsig)));
        } else if (as_bool((primitive_value(logical_eq(xcensl,0)) && primitive_value(logical_eq(xcensu,1))))) {

            return stan::math::promote_scalar<fun_return_scalar_t__>(log_diff_exp(0,normal_cdf_log((xobs - 1),xtrue,xsig)));
        } else if (as_bool((primitive_value(logical_eq(xcensl,1)) && primitive_value(logical_eq(xcensu,0))))) {
            return stan::math::promote_scalar<fun_return_scalar_t__>(normal_cdf_log(xobs,xtrue,xsig));
        } else {
            return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct xlikecens_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& xobs,
              const T1__& xtrue,
              const T2__& xsig,
              const T3__& xcensu,
              const T4__& xcensl, std::ostream* pstream__) const {
        return xlikecens(xobs, xtrue, xsig, xcensu, xcensl, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
ylikecens(const T0__& yobs,
              const T1__& ytrue,
              const T2__& ysig,
              const T3__& ycensu,
              const T4__& ycensl, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        if (as_bool((primitive_value(logical_eq(ycensu,0)) && primitive_value(logical_eq(ycensl,0))))) {
            return stan::math::promote_scalar<fun_return_scalar_t__>(log_diff_exp(normal_cdf_log((yobs + 0.5),ytrue,ysig),normal_cdf_log((yobs - 0.5),ytrue,ysig)));
        } else if (as_bool((primitive_value(logical_eq(ycensl,0)) && primitive_value(logical_eq(ycensu,1))))) {
            return stan::math::promote_scalar<fun_return_scalar_t__>(log_diff_exp(0,normal_cdf_log((yobs - 0.5),ytrue,ysig)));
        } else if (as_bool((primitive_value(logical_eq(ycensl,1)) && primitive_value(logical_eq(ycensu,0))))) {
            return stan::math::promote_scalar<fun_return_scalar_t__>(normal_cdf_log((yobs + 0.5),ytrue,ysig));
        } else {
            return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ylikecens_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& yobs,
              const T1__& ytrue,
              const T2__& ysig,
              const T3__& ycensu,
              const T4__& ycensl, std::ostream* pstream__) const {
        return ylikecens(yobs, ytrue, ysig, ycensu, ycensl, pstream__);
    }
};

class model_spline : public prob_grad {
private:
    int N;
    int numCoef;
    int Ngrid;
    vector_d yobs;
    vector_d xobs;
    vector_d xcensl;
    vector_d xcensu;
    vector_d ycensl;
    vector_d ycensu;
    int xlower;
    int xupper;
    vector_d icoefs;
    matrix_d designMatrix;
    matrix_d designMatrixGrid;
    int n_groups;
    vector<double> xgrid;
    double xsig;
    double ysig;
public:
    model_spline(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_spline(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_spline_namespace::model_spline";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "numCoef", "int", context__.to_vec());
        numCoef = int(0);
        vals_i__ = context__.vals_i("numCoef");
        pos__ = 0;
        numCoef = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Ngrid", "int", context__.to_vec());
        Ngrid = int(0);
        vals_i__ = context__.vals_i("Ngrid");
        pos__ = 0;
        Ngrid = vals_i__[pos__++];
        validate_non_negative_index("yobs", "N", N);
        context__.validate_dims("data initialization", "yobs", "vector_d", context__.to_vec(N));
        validate_non_negative_index("yobs", "N", N);
        yobs = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        vals_r__ = context__.vals_r("yobs");
        pos__ = 0;
        size_t yobs_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < yobs_i_vec_lim__; ++i_vec__) {
            yobs[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("xobs", "N", N);
        context__.validate_dims("data initialization", "xobs", "vector_d", context__.to_vec(N));
        validate_non_negative_index("xobs", "N", N);
        xobs = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        vals_r__ = context__.vals_r("xobs");
        pos__ = 0;
        size_t xobs_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < xobs_i_vec_lim__; ++i_vec__) {
            xobs[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("xcensl", "N", N);
        context__.validate_dims("data initialization", "xcensl", "vector_d", context__.to_vec(N));
        validate_non_negative_index("xcensl", "N", N);
        xcensl = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        vals_r__ = context__.vals_r("xcensl");
        pos__ = 0;
        size_t xcensl_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < xcensl_i_vec_lim__; ++i_vec__) {
            xcensl[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("xcensu", "N", N);
        context__.validate_dims("data initialization", "xcensu", "vector_d", context__.to_vec(N));
        validate_non_negative_index("xcensu", "N", N);
        xcensu = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        vals_r__ = context__.vals_r("xcensu");
        pos__ = 0;
        size_t xcensu_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < xcensu_i_vec_lim__; ++i_vec__) {
            xcensu[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("ycensl", "N", N);
        context__.validate_dims("data initialization", "ycensl", "vector_d", context__.to_vec(N));
        validate_non_negative_index("ycensl", "N", N);
        ycensl = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        vals_r__ = context__.vals_r("ycensl");
        pos__ = 0;
        size_t ycensl_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < ycensl_i_vec_lim__; ++i_vec__) {
            ycensl[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("ycensu", "N", N);
        context__.validate_dims("data initialization", "ycensu", "vector_d", context__.to_vec(N));
        validate_non_negative_index("ycensu", "N", N);
        ycensu = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        vals_r__ = context__.vals_r("ycensu");
        pos__ = 0;
        size_t ycensu_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < ycensu_i_vec_lim__; ++i_vec__) {
            ycensu[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "xlower", "int", context__.to_vec());
        xlower = int(0);
        vals_i__ = context__.vals_i("xlower");
        pos__ = 0;
        xlower = vals_i__[pos__++];
        context__.validate_dims("data initialization", "xupper", "int", context__.to_vec());
        xupper = int(0);
        vals_i__ = context__.vals_i("xupper");
        pos__ = 0;
        xupper = vals_i__[pos__++];
        validate_non_negative_index("icoefs", "numCoef", numCoef);
        context__.validate_dims("data initialization", "icoefs", "vector_d", context__.to_vec(numCoef));
        validate_non_negative_index("icoefs", "numCoef", numCoef);
        icoefs = vector_d(static_cast<Eigen::VectorXd::Index>(numCoef));
        vals_r__ = context__.vals_r("icoefs");
        pos__ = 0;
        size_t icoefs_i_vec_lim__ = numCoef;
        for (size_t i_vec__ = 0; i_vec__ < icoefs_i_vec_lim__; ++i_vec__) {
            icoefs[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("designMatrix", "N", N);
        validate_non_negative_index("designMatrix", "numCoef", numCoef);
        context__.validate_dims("data initialization", "designMatrix", "matrix_d", context__.to_vec(N,numCoef));
        validate_non_negative_index("designMatrix", "N", N);
        validate_non_negative_index("designMatrix", "numCoef", numCoef);
        designMatrix = matrix_d(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(numCoef));
        vals_r__ = context__.vals_r("designMatrix");
        pos__ = 0;
        size_t designMatrix_m_mat_lim__ = N;
        size_t designMatrix_n_mat_lim__ = numCoef;
        for (size_t n_mat__ = 0; n_mat__ < designMatrix_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < designMatrix_m_mat_lim__; ++m_mat__) {
                designMatrix(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("designMatrixGrid", "Ngrid", Ngrid);
        validate_non_negative_index("designMatrixGrid", "numCoef", numCoef);
        context__.validate_dims("data initialization", "designMatrixGrid", "matrix_d", context__.to_vec(Ngrid,numCoef));
        validate_non_negative_index("designMatrixGrid", "Ngrid", Ngrid);
        validate_non_negative_index("designMatrixGrid", "numCoef", numCoef);
        designMatrixGrid = matrix_d(static_cast<Eigen::VectorXd::Index>(Ngrid),static_cast<Eigen::VectorXd::Index>(numCoef));
        vals_r__ = context__.vals_r("designMatrixGrid");
        pos__ = 0;
        size_t designMatrixGrid_m_mat_lim__ = Ngrid;
        size_t designMatrixGrid_n_mat_lim__ = numCoef;
        for (size_t n_mat__ = 0; n_mat__ < designMatrixGrid_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < designMatrixGrid_m_mat_lim__; ++m_mat__) {
                designMatrixGrid(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "n_groups", "int", context__.to_vec());
        n_groups = int(0);
        vals_i__ = context__.vals_i("n_groups");
        pos__ = 0;
        n_groups = vals_i__[pos__++];
        validate_non_negative_index("xgrid", "Ngrid", Ngrid);
        context__.validate_dims("data initialization", "xgrid", "double", context__.to_vec(Ngrid));
        validate_non_negative_index("xgrid", "Ngrid", Ngrid);
        xgrid = std::vector<double>(Ngrid,double(0));
        vals_r__ = context__.vals_r("xgrid");
        pos__ = 0;
        size_t xgrid_limit_0__ = Ngrid;
        for (size_t i_0__ = 0; i_0__ < xgrid_limit_0__; ++i_0__) {
            xgrid[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "xsig", "double", context__.to_vec());
        xsig = double(0);
        vals_r__ = context__.vals_r("xsig");
        pos__ = 0;
        xsig = vals_r__[pos__++];
        context__.validate_dims("data initialization", "ysig", "double", context__.to_vec());
        ysig = double(0);
        vals_r__ = context__.vals_r("ysig");
        pos__ = 0;
        ysig = vals_r__[pos__++];

        // validate, data variables
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        validate_non_negative_index("mu", "n_groups", n_groups);
        num_params_r__ += n_groups;
        validate_non_negative_index("v", "n_groups", n_groups);
        num_params_r__ += (n_groups - 1);
        validate_non_negative_index("sigma", "n_groups", n_groups);
        num_params_r__ += n_groups;
        validate_non_negative_index("coef", "numCoef", numCoef);
        num_params_r__ += numCoef;
        validate_non_negative_index("xtrue", "N", N);
        num_params_r__ += N;
        ++num_params_r__;
    }

    ~model_spline() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("mu")))
            throw std::runtime_error("variable mu missing");
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        validate_non_negative_index("mu", "n_groups", n_groups);
        context__.validate_dims("initialization", "mu", "double", context__.to_vec(n_groups));
        // generate_declaration mu
        std::vector<double> mu(n_groups,double(0));
        for (int i0__ = 0U; i0__ < n_groups; ++i0__)
            mu[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_groups; ++i0__)
            try {
            writer__.scalar_unconstrain(mu[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu: ") + e.what());
        }

        if (!(context__.contains_r("v")))
            throw std::runtime_error("variable v missing");
        vals_r__ = context__.vals_r("v");
        pos__ = 0U;
        validate_non_negative_index("v", "n_groups", n_groups);
        context__.validate_dims("initialization", "v", "vector_d", context__.to_vec(n_groups));
        // generate_declaration v
        vector_d v(static_cast<Eigen::VectorXd::Index>(n_groups));
        for (int j1__ = 0U; j1__ < n_groups; ++j1__)
            v(j1__) = vals_r__[pos__++];
        try {
            writer__.simplex_unconstrain(v);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable v: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "n_groups", n_groups);
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec(n_groups));
        // generate_declaration sigma
        std::vector<double> sigma(n_groups,double(0));
        for (int i0__ = 0U; i0__ < n_groups; ++i0__)
            sigma[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_groups; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,sigma[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("coef")))
            throw std::runtime_error("variable coef missing");
        vals_r__ = context__.vals_r("coef");
        pos__ = 0U;
        validate_non_negative_index("coef", "numCoef", numCoef);
        context__.validate_dims("initialization", "coef", "row_vector_d", context__.to_vec(numCoef));
        // generate_declaration coef
        row_vector_d coef(static_cast<Eigen::VectorXd::Index>(numCoef));
        for (int j1__ = 0U; j1__ < numCoef; ++j1__)
            coef(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_lb_unconstrain(0,coef);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable coef: ") + e.what());
        }

        if (!(context__.contains_r("xtrue")))
            throw std::runtime_error("variable xtrue missing");
        vals_r__ = context__.vals_r("xtrue");
        pos__ = 0U;
        validate_non_negative_index("xtrue", "N", N);
        context__.validate_dims("initialization", "xtrue", "double", context__.to_vec(N));
        // generate_declaration xtrue
        std::vector<double> xtrue(N,double(0));
        for (int i0__ = 0U; i0__ < N; ++i0__)
            xtrue[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N; ++i0__)
            try {
            writer__.scalar_unconstrain(xtrue[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable xtrue: ") + e.what());
        }

        if (!(context__.contains_r("alpha_coef")))
            throw std::runtime_error("variable alpha_coef missing");
        vals_r__ = context__.vals_r("alpha_coef");
        pos__ = 0U;
        context__.validate_dims("initialization", "alpha_coef", "double", context__.to_vec());
        // generate_declaration alpha_coef
        double alpha_coef(0);
        alpha_coef = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,alpha_coef);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha_coef: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<T__> mu;
        size_t dim_mu_0__ = n_groups;
        mu.reserve(dim_mu_0__);
        for (size_t k_0__ = 0; k_0__ < dim_mu_0__; ++k_0__) {
            if (jacobian__)
                mu.push_back(in__.scalar_constrain(lp__));
            else
                mu.push_back(in__.scalar_constrain());
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  v;
        (void) v;  // dummy to suppress unused var warning
        if (jacobian__)
            v = in__.simplex_constrain(n_groups,lp__);
        else
            v = in__.simplex_constrain(n_groups);

        vector<T__> sigma;
        size_t dim_sigma_0__ = n_groups;
        sigma.reserve(dim_sigma_0__);
        for (size_t k_0__ = 0; k_0__ < dim_sigma_0__; ++k_0__) {
            if (jacobian__)
                sigma.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                sigma.push_back(in__.scalar_lb_constrain(0));
        }

        Eigen::Matrix<T__,1,Eigen::Dynamic>  coef;
        (void) coef;  // dummy to suppress unused var warning
        if (jacobian__)
            coef = in__.row_vector_lb_constrain(0,numCoef,lp__);
        else
            coef = in__.row_vector_lb_constrain(0,numCoef);

        vector<T__> xtrue;
        size_t dim_xtrue_0__ = N;
        xtrue.reserve(dim_xtrue_0__);
        for (size_t k_0__ = 0; k_0__ < dim_xtrue_0__; ++k_0__) {
            if (jacobian__)
                xtrue.push_back(in__.scalar_constrain(lp__));
            else
                xtrue.push_back(in__.scalar_constrain());
        }

        T__ alpha_coef;
        (void) alpha_coef;  // dummy to suppress unused var warning
        if (jacobian__)
            alpha_coef = in__.scalar_lb_constrain(0,lp__);
        else
            alpha_coef = in__.scalar_lb_constrain(0);


        // transformed parameters
        validate_non_negative_index("Theta", "n_groups", n_groups);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  Theta(static_cast<Eigen::VectorXd::Index>(n_groups));
        (void) Theta;  // dummy to suppress unused var warning

        stan::math::initialize(Theta, DUMMY_VAR__);
        stan::math::fill(Theta,DUMMY_VAR__);


        try {
            stan::math::assign(get_base1_lhs(Theta,1,"Theta",1), get_base1(v,1,"v",1));
            for (int j = 2; j <= (n_groups - 1); ++j) {

                stan::math::assign(get_base1_lhs(Theta,j,"Theta",1), (((get_base1(v,j,"v",1) * (1 - get_base1(v,(j - 1),"v",1))) * get_base1(Theta,(j - 1),"Theta",1)) / get_base1(v,(j - 1),"v",1)));
            }
            stan::math::assign(get_base1_lhs(Theta,n_groups,"Theta",1), (1 - sum(stan::model::rvalue(Theta, stan::model::cons_list(stan::model::index_min_max(1, (n_groups - 1)), stan::model::nil_index_list()), "Theta"))));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < n_groups; ++i0__) {
            if (stan::math::is_uninitialized(Theta(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Theta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        stan::math::check_simplex(function__,"Theta",Theta);

        // model body
        try {
            {
                validate_non_negative_index("contributions", "n_groups", n_groups);
                Eigen::Matrix<T__,Eigen::Dynamic,1>  contributions(static_cast<Eigen::VectorXd::Index>(n_groups));
                (void) contributions;  // dummy to suppress unused var warning

                stan::math::initialize(contributions, DUMMY_VAR__);
                stan::math::fill(contributions,DUMMY_VAR__);
                validate_non_negative_index("y_mu", "N", N);
                Eigen::Matrix<T__,1,Eigen::Dynamic>  y_mu(static_cast<Eigen::VectorXd::Index>(N));
                (void) y_mu;  // dummy to suppress unused var warning

                stan::math::initialize(y_mu, DUMMY_VAR__);
                stan::math::fill(y_mu,DUMMY_VAR__);
                T__ alpha;
                (void) alpha;  // dummy to suppress unused var warning

                stan::math::initialize(alpha, DUMMY_VAR__);
                stan::math::fill(alpha,DUMMY_VAR__);
                stan::math::assign(alpha,1);


                lp_accum__.add(normal_log<propto__>(sigma, 0.5, 4));
                lp_accum__.add(normal_log<propto__>(mu, 0, 20));
                lp_accum__.add(beta_log<propto__>(v, 1, alpha));
                for (int i = 1; i <= N; ++i) {

                    if (as_bool((primitive_value(logical_eq(get_base1(xcensl,i,"xcensl",1),0)) && primitive_value(logical_eq(get_base1(xcensu,i,"xcensu",1),0))))) {

                        lp_accum__.add(normal_log<propto__>(get_base1(xtrue,i,"xtrue",1), (get_base1(xobs,i,"xobs",1) - 0.5), 2));
                    } else if (as_bool((primitive_value(logical_eq(get_base1(xcensl,i,"xcensl",1),1)) && primitive_value(logical_eq(get_base1(xcensu,i,"xcensu",1),0))))) {

                        lp_accum__.add(normal_log<propto__>(get_base1(xtrue,i,"xtrue",1), (get_base1(xobs,i,"xobs",1) - 1.5), 3));
                    } else if (as_bool((primitive_value(logical_eq(get_base1(xcensl,i,"xcensl",1),0)) && primitive_value(logical_eq(get_base1(xcensu,i,"xcensu",1),1))))) {

                        lp_accum__.add(normal_log<propto__>(get_base1(xtrue,i,"xtrue",1), (get_base1(xobs,i,"xobs",1) + 0.5), 3));
                    }
                }
                lp_accum__.add(normal_log<propto__>(get_base1(coef,numCoef,"coef",1), 1, 10));
                for (int i = (numCoef - 1); i <= 1; ++i) {
                    lp_accum__.add(normal_log<propto__>(get_base1(coef,i,"coef",1), get_base1(coef,(i + 1),"coef",1), alpha_coef));
                }
                lp_accum__.add(uniform_log<propto__>(alpha_coef, 0, 2));
                for (int i = 1; i <= N; ++i) {

                    lp_accum__.add(xlikecens(get_base1(xobs,i,"xobs",1),get_base1(xtrue,i,"xtrue",1),xsig,get_base1(xcensu,i,"xcensu",1),get_base1(xcensl,i,"xcensl",1), pstream__));
                }
                stan::math::assign(y_mu, multiply(coef,transpose(designMatrix)));
                for (int i = 1; i <= N; ++i) {

                    lp_accum__.add(ylikecens(get_base1(yobs,i,"yobs",1),get_base1(y_mu,i,"y_mu",1),ysig,get_base1(ycensu,i,"ycensu",1),get_base1(ycensl,i,"ycensl",1), pstream__));
                }
                for (int i = 1; i <= N; ++i) {

                    for (int k = 1; k <= n_groups; ++k) {

                        stan::math::assign(get_base1_lhs(contributions,k,"contributions",1), (log(get_base1(Theta,k,"Theta",1)) + normal_log(get_base1(xtrue,i,"xtrue",1),get_base1(mu,k,"mu",1),get_base1(sigma,k,"sigma",1))));
                    }
                    lp_accum__.add(log_sum_exp(contributions));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu");
        names__.push_back("v");
        names__.push_back("sigma");
        names__.push_back("coef");
        names__.push_back("xtrue");
        names__.push_back("alpha_coef");
        names__.push_back("Theta");
        names__.push_back("MIC_Dens");
        names__.push_back("gx");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(numCoef);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ngrid);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ngrid);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_spline_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<double> mu;
        size_t dim_mu_0__ = n_groups;
        for (size_t k_0__ = 0; k_0__ < dim_mu_0__; ++k_0__) {
            mu.push_back(in__.scalar_constrain());
        }
        vector_d v = in__.simplex_constrain(n_groups);
        vector<double> sigma;
        size_t dim_sigma_0__ = n_groups;
        for (size_t k_0__ = 0; k_0__ < dim_sigma_0__; ++k_0__) {
            sigma.push_back(in__.scalar_lb_constrain(0));
        }
        row_vector_d coef = in__.row_vector_lb_constrain(0,numCoef);
        vector<double> xtrue;
        size_t dim_xtrue_0__ = N;
        for (size_t k_0__ = 0; k_0__ < dim_xtrue_0__; ++k_0__) {
            xtrue.push_back(in__.scalar_constrain());
        }
        double alpha_coef = in__.scalar_lb_constrain(0);
        for (int k_0__ = 0; k_0__ < n_groups; ++k_0__) {
            vars__.push_back(mu[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_groups; ++k_0__) {
            vars__.push_back(v[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_groups; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < numCoef; ++k_0__) {
            vars__.push_back(coef[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(xtrue[k_0__]);
        }
        vars__.push_back(alpha_coef);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("Theta", "n_groups", n_groups);
        vector_d Theta(static_cast<Eigen::VectorXd::Index>(n_groups));
        (void) Theta;  // dummy to suppress unused var warning

        stan::math::initialize(Theta, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(Theta,DUMMY_VAR__);


        try {
            stan::math::assign(get_base1_lhs(Theta,1,"Theta",1), get_base1(v,1,"v",1));
            for (int j = 2; j <= (n_groups - 1); ++j) {

                stan::math::assign(get_base1_lhs(Theta,j,"Theta",1), (((get_base1(v,j,"v",1) * (1 - get_base1(v,(j - 1),"v",1))) * get_base1(Theta,(j - 1),"Theta",1)) / get_base1(v,(j - 1),"v",1)));
            }
            stan::math::assign(get_base1_lhs(Theta,n_groups,"Theta",1), (1 - sum(stan::model::rvalue(Theta, stan::model::cons_list(stan::model::index_min_max(1, (n_groups - 1)), stan::model::nil_index_list()), "Theta"))));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        stan::math::check_simplex(function__,"Theta",Theta);

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < n_groups; ++k_0__) {
            vars__.push_back(Theta[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("MIC_Dens", "Ngrid", Ngrid);
        vector<double> MIC_Dens(Ngrid, 0.0);
        stan::math::initialize(MIC_Dens, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(MIC_Dens,DUMMY_VAR__);
        validate_non_negative_index("gx", "Ngrid", Ngrid);
        row_vector_d gx(static_cast<Eigen::VectorXd::Index>(Ngrid));
        (void) gx;  // dummy to suppress unused var warning

        stan::math::initialize(gx, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(gx,DUMMY_VAR__);


        try {
            for (int i = 1; i <= Ngrid; ++i) {

                stan::math::assign(get_base1_lhs(MIC_Dens,i,"MIC_Dens",1), 0);
                for (int j = 1; j <= n_groups; ++j) {

                    stan::math::assign(get_base1_lhs(MIC_Dens,i,"MIC_Dens",1), (get_base1(MIC_Dens,i,"MIC_Dens",1) + (((get_base1(Theta,j,"Theta",1) * 1) / sqrt(((2 * stan::math::pi()) * pow(get_base1(sigma,j,"sigma",1),2)))) * exp((-(pow((get_base1(xgrid,i,"xgrid",1) - get_base1(mu,j,"mu",1)),2)) / (2 * pow(get_base1(sigma,j,"sigma",1),2)))))));
                }
            }
            stan::math::assign(gx, multiply(coef,transpose(designMatrixGrid)));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < Ngrid; ++k_0__) {
            vars__.push_back(MIC_Dens[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < Ngrid; ++k_0__) {
            vars__.push_back(gx[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_spline";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= numCoef; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "coef" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xtrue" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_coef";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= Ngrid; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "MIC_Dens" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Ngrid; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gx" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (n_groups - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_groups; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= numCoef; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "coef" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xtrue" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_coef";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= (n_groups - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= Ngrid; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "MIC_Dens" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Ngrid; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gx" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




#endif
